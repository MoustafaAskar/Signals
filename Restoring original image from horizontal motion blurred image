% Function to load and display an image
function restore()
    % choose an image file
    [fileName, filePath] = uigetfile({'*.jpg;*.jpeg;*.png;*.bmp', 'Image Files (*.jpg, *.jpeg, *.png, *.bmp)'}, 'Select an Image');
    
    % Check if file selection is cancelled
    if isequal(fileName, 0) || isequal(filePath, 0)
        disp('operation canceled.');
        return;
    end
    
    % Read the selected image
    originalImage = imread(fullfile(filePath, fileName));

    % Blur parameters
    blurLength = 13; 

    % Applying motion blur
    blurredImage = applyhorizontalMotionBlur(originalImage, blurLength);

    % Restoring the original image using FFT
    restoredImage = restoreImage(blurredImage, blurLength);

    % Displaying the original, blurred, and restored images
    figure;
    
    subplot(1, 3, 1);
    imshow(originalImage);
    title('Original Image');

    subplot(1, 3, 2);
    imshow(blurredImage);
    title('Blurred Image (Horizontal Motion Blur)');

    subplot(1, 3, 3);
    imshow(restoredImage);
    title('Restored Image');
end

function blurredImage = applyhorizontalMotionBlur(image, blurLength)
    image = im2double(image);

    % Creating a horizontal motion blur kernel
    kernel = zeros(blurLength);
    kernel(round(blurLength/2), :) = 1;
    kernel = kernel / sum(kernel(:));

    % Applying motion blur using a loop for each color channel
    blurredImage = zeros(size(image));
    for channel = 1:3
        blurredImage(:, :, channel) = conv2(image(:, :, channel), kernel, 'same');
    end
end

function restoredImage = restoreImage(blurredImage, blurLength)
    % Getting the size of the blurred image
    [m, n, ~] = size(blurredImage);

    % Creating a horizontal motion blur kernel
    kernel = zeros(blurLength);
    kernel(round(blurLength/2), :) = 1;
    kernel = kernel / sum(kernel(:));


    % Fourier transform of the blurred image and filter
    blurredImageFFT = fft2(blurredImage);
    kernelFFT = fft2(kernel, m, n);


    % Original image by division in the frequency domain
    restoredImageFFT = blurredImageFFT ./ kernelFFT;

    % Inverse Fourier transform to restore image in time domain
    restoredImage = real(ifft2(restoredImageFFT));
end
